import 'core-js/features/promise';
import _ from 'lodash-es';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var cacheTimeout = 3000;
var documentReferencePromiseMapCache = {};
var serializedDocumentTransformer = transformDates;
var SerializedDocumentPromise = /*#__PURE__*/function (_Promise) {
  _inheritsLoose(SerializedDocumentPromise, _Promise);

  function SerializedDocumentPromise(fn) {
    var _this;

    _this = _Promise.call(this, fn) || this;

    _this.ready = function () {
      return new Promise( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(resolve, reject) {
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this.then(function (serializedDocument) {
                    serializedDocument.ready().then(resolve)["catch"](reject);
                  })["catch"](reject);

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    };

    return _this;
  }

  return SerializedDocumentPromise;
}( /*#__PURE__*/_wrapNativeSuper(Promise));
var SerializedDocumentArrayPromise = /*#__PURE__*/function (_Promise2) {
  _inheritsLoose(SerializedDocumentArrayPromise, _Promise2);

  function SerializedDocumentArrayPromise(fn) {
    var _this2;

    _this2 = _Promise2.call(this, fn) || this;

    _this2.ready = function () {
      return new Promise( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(resolve, reject) {
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this2.then(function (serializedDocumentArray) {
                    serializedDocumentArray.ready().then(resolve)["catch"](reject);
                  })["catch"](reject);

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x3, _x4) {
          return _ref2.apply(this, arguments);
        };
      }());
    };

    return _this2;
  }

  return SerializedDocumentArrayPromise;
}( /*#__PURE__*/_wrapNativeSuper(Promise));
var SerializedDocumentArray = /*#__PURE__*/function (_Array) {
  _inheritsLoose(SerializedDocumentArray, _Array);

  function SerializedDocumentArray(querySnapshot, includesConfig) {
    var docs = [];

    if (querySnapshot.docs) {
      docs = querySnapshot.docs.map(function (doc) {
        return new SerializedDocument(doc, includesConfig);
      });
    }

    return _Array.call.apply(_Array, [this].concat(docs)) || this;
  }

  var _proto = SerializedDocumentArray.prototype;

  _proto.allPromises = function allPromises() {
    return Promise.all(this.map(function (doc) {
      return Promise.all(doc._promisesArray);
    }));
  };

  _proto.allPromisesRecursive = function allPromisesRecursive() {
    return Promise.all(this.map(function (doc) {
      return doc.allPromisesRecursive();
    }));
  };

  _proto.ready = function ready() {
    var _this3 = this;

    return new Promise( /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(resolve, reject) {
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this3.allPromisesRecursive().then(function () {
                  return resolve(_this3);
                })["catch"](reject);

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }());
  };

  _proto.JSONStringify = function JSONStringify() {
    return toJSON(this);
  };

  return SerializedDocumentArray;
}( /*#__PURE__*/_wrapNativeSuper(Array));

SerializedDocumentArray.fromDocumentReferenceArray = function (documentReferenceArray, includesConfig) {
  return new SerializedDocumentArrayPromise( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(resolve, reject) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              Promise.all(documentReferenceArray.map(function (documentReference) {
                return SerializedDocument.fromDocumentReference(documentReference, includesConfig);
              })).then(function (serializedDocuments) {
                resolve(Object.setPrototypeOf(serializedDocuments, SerializedDocumentArray.prototype));
              })["catch"](reject);

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x7, _x8) {
      return _ref4.apply(this, arguments);
    };
  }());
};

SerializedDocumentArray.fromQuery = function (collectionReferenceOrQuery, includesConfig) {
  return new SerializedDocumentArrayPromise( /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(resolve, reject) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              collectionReferenceOrQuery.get().then(function (querySnapshot) {
                resolve(new SerializedDocumentArray(querySnapshot, includesConfig));
              })["catch"](reject);

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x9, _x10) {
      return _ref5.apply(this, arguments);
    };
  }());
};

SerializedDocumentArray.fromJSON = function (obj, firestore) {
  return fromJSON(obj, firestore);
};

var SerializedDocument = function SerializedDocument(documentSnapshot, includeConfig) {
  var _this4 = this;

  if (includeConfig === void 0) {
    includeConfig = {};
  }

  this.included = {};
  this.promises = {};
  this._promisesArray = [];
  this._includedArray = [];

  this.processIncludes = function (includeConfig) {
    // Special case that recursively finds documentReferences and includes them.
    if (includeConfig === 'ALL') {
      console.log('All received');
      return _this4.findReferences(_this4.data, []);
    }

    Object.entries(includeConfig).forEach(function (_ref6) {
      var path = _ref6[0],
          includeValue = _ref6[1];

      var valueInData = _.get(_this4.data, path); // Is simple relation pointing to a reference on document data


      if (valueInData && valueInData.get !== undefined) {
        return _this4.includeDocumentReference(path, valueInData, includeValue);
      } //Is nested array relation SerializedDocument[]


      if (Array.isArray(valueInData)) {
        return _this4.includeReferenceArray(path, valueInData, includeValue);
      } //Is nested object relation {key1: SerializedDocument, key2: SerializedDocument}


      if (typeof valueInData === 'object' && valueInData !== null) {
        return Object.entries(valueInData).forEach(function (_ref7) {
          var key = _ref7[0],
              documentReference = _ref7[1];

          _this4.includeDocumentReference(path + "." + key, documentReference, includeValue);
        });
      } //Is function relation, the function will return a reference to be included.


      if (typeof includeValue === 'function') {
        var returnedValue = includeValue(_this4);

        if (isCollectionReferenceOrQuery(returnedValue)) {
          return _this4.includeCollectionReferenceOrQuery(path, returnedValue);
        } else if (isDocumentReference(returnedValue)) {
          return _this4.includeDocumentReference(path, returnedValue);
        }
      }
    });
  };

  this.includeReferenceArray = function (path, documentReferenceArray, includeConfig) {
    if (includeConfig === void 0) {
      includeConfig = {};
    }

    _.set(_this4.included, path, []);

    _.set(_this4.promises, path, []);

    documentReferenceArray.forEach(function (documentReference) {
      var promise = new Promise(function (resolve, reject) {
        getCachedDocumentSnapshotPromise(documentReference).then(function (documentSnapshot) {
          var includedSerializedDocument = serializedDocumentTransformer(new SerializedDocument(documentSnapshot, includeConfig));

          _.get(_this4.included, path).push(includedSerializedDocument);

          _this4._includedArray.push(includedSerializedDocument);

          resolve(includedSerializedDocument);
        })["catch"](reject);
      });

      _.get(_this4.promises, path).push(promise);

      _this4._promisesArray.push(promise);
    });
  };

  this.includeDocumentReference = function (path, documentReference, includeConfig) {
    if (includeConfig === void 0) {
      includeConfig = {};
    }

    var promise = new Promise(function (resolve, reject) {
      getCachedDocumentSnapshotPromise(documentReference).then(function (documentSnapshot) {
        var includedSerializedDocument = serializedDocumentTransformer(new SerializedDocument(documentSnapshot, includeConfig));

        _.set(_this4.included, path, includedSerializedDocument);

        _this4._includedArray.push(includedSerializedDocument);

        resolve(includedSerializedDocument);
      })["catch"](reject);
    });

    _.set(_this4.promises, path, promise);

    _this4._promisesArray.push(promise);
  };

  this.includeCollectionReferenceOrQuery = function (path, collectionReferenceOrQuery, includeConfig) {
    if (includeConfig === void 0) {
      includeConfig = {};
    }

    var promise = new Promise( /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(resolve, reject) {
        return runtime_1.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                SerializedDocumentArray.fromQuery(collectionReferenceOrQuery, includeConfig).then(function (serializedDocumentArray) {
                  _.set(_this4.included, path, serializedDocumentArray);

                  resolve(serializedDocumentArray);
                })["catch"](reject);

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x11, _x12) {
        return _ref8.apply(this, arguments);
      };
    }());

    _.set(_this4.promises, path, promise);

    _this4._promisesArray.push(promise);
  };

  this.findReferences = function (data, _pathSegments) {
    if (data) {
      Object.entries(data).forEach(function (_ref9) {
        var property = _ref9[0],
            value = _ref9[1];
        var pathSegments = [].concat(_pathSegments, [property]);

        if (isDocumentReference(value)) {
          //Is documentReference
          _this4.includeDocumentReference(buildReferencePathFromSegments(pathSegments), value);
        } else if (Array.isArray(value)) {
          // Array
          value.forEach(function (arrayValue, index) {
            var itemPathSegments = [].concat(pathSegments, ["[" + index + "]"]);

            if (isPlainObject(arrayValue)) {
              _this4.findReferences(arrayValue, itemPathSegments);
            } else if (isDocumentReference(arrayValue)) {
              _this4.includeDocumentReference(buildReferencePathFromSegments(itemPathSegments), arrayValue);
            }
          });
        } else if (isPlainObject(value)) {
          // Is an object, not a reference nor a date!
          _this4.findReferences(value, pathSegments); // Regular object {}

        }
      });
    }
  };

  this.allPromisesRecursive = function () {
    return new Promise(function (resolve, reject) {
      Promise.all(_this4._promisesArray).then(function () {
        var allPromises = [];

        _this4._includedArray.forEach(function (includedValue) {
          allPromises.push(includedValue.allPromisesRecursive());
        });

        Promise.all(allPromises).then(function (res) {
          resolve(res);
        });
      })["catch"](reject);
    });
  };

  this.ready = function () {
    return new Promise( /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(resolve, reject) {
        return runtime_1.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _this4.allPromisesRecursive().then(function () {
                  return resolve(_this4);
                })["catch"](reject);

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x13, _x14) {
        return _ref10.apply(this, arguments);
      };
    }());
  };

  this.JSONStringify = function () {
    return toJSON(_this4);
  };

  this.data = documentSnapshot.data();
  this.snapshot = documentSnapshot;
  this.ref = documentSnapshot.ref;
  this.processIncludes(includeConfig);
  this.data = serializedDocumentTransformer(this).data;
};

SerializedDocument.createLocal = function (ref, _data, includeConfig) {
  if (_data === void 0) {
    _data = {};
  }

  if (includeConfig === void 0) {
    includeConfig = {};
  }

  var serializedDocument = new SerializedDocument({
    ref: ref,
    data: function data() {
      return _data;
    }
  }, includeConfig);
  serializedDocument.data = _data;
  serializedDocument.ref = ref;
  serializedDocument.data = serializedDocumentTransformer(serializedDocument).data;
  return serializedDocument;
};

SerializedDocument.fromDocumentReference = function (ref, includeConfig) {
  return new SerializedDocumentPromise(function (resolve, reject) {
    getCachedDocumentSnapshotPromise(ref).then(function (documentSnapshot) {
      return resolve(new SerializedDocument(documentSnapshot, includeConfig));
    })["catch"](reject);
  });
};

SerializedDocument.fromJSON = function (obj, firestore) {
  return fromJSON(obj, firestore);
};

SerializedDocument.toJSON = function (obj) {
  return toJSON(obj);
};

function transformDates(serializedDocument) {
  serializedDocument.data = transformDatesHelper(serializedDocument.data);
  return serializedDocument;
}

function transformDatesHelper(data) {
  if (data) Object.entries(data).forEach(function (_ref11) {
    var property = _ref11[0],
        value = _ref11[1];

    if (Array.isArray(value)) {
      // Array
      value.forEach(function (arrayValue, index) {
        if (isPlainObject(arrayValue)) {
          value[index] = transformDatesHelper(arrayValue);
        }
      });
    } else if (typeof (value == null ? void 0 : value.toDate) === 'function') {
      // Firestore timestamp
      data[property] = value.toDate();
    } else if (isPlainObject(value)) {
      // Is an object, not a reference nor a date!
      data[property] = transformDatesHelper(value); // Regular object {}
    }
  });
  return data;
}

function isPlainObject(value) {
  return Object.prototype.toString.call(value) == '[object Object]' && value.constructor.name === 'Object';
}

function buildReferencePathFromSegments(pathSegments) {
  return pathSegments.join('.').replaceAll('.[', '[');
}

function isDocumentReference(value) {
  return typeof (value == null ? void 0 : value.get) === 'function';
}

function isCollectionReferenceOrQuery(value) {
  return typeof (value == null ? void 0 : value.where) === 'function' && typeof (value == null ? void 0 : value.get) === 'function';
}

function setCacheTimeout(milliseconds) {
  cacheTimeout = milliseconds;
}
function setSerializedDocumentTransformer(transformerFunction) {
  serializedDocumentTransformer = transformerFunction;
}
function getCachedDocumentSnapshotPromise(documentReference) {
  var _documentReferencePro;

  if (((_documentReferencePro = documentReferencePromiseMapCache[documentReference.path]) == null ? void 0 : _documentReferencePro.time) + cacheTimeout > Date.now()) {
    return documentReferencePromiseMapCache[documentReference.path];
  } else {
    var documentSnapshotPromise = documentReference.get();
    documentSnapshotPromise.time = Date.now();
    return documentReferencePromiseMapCache[documentReference.path] = documentSnapshotPromise;
  }
}

function convertRefToJoinRef(ref) {
  return {
    _type: 'DocumentReference',
    path: ref.path
  };
}

function convertJSDateToJoinDate(obj) {
  return {
    _type: 'Date',
    value: obj.toString()
  };
}

function preprocessObjectToStringify(data) {
  if (data) {
    if (data instanceof SerializedDocument) {
      data = _.pick(data, ['data', 'included', 'ref', 'snapshot']);
      data.snapshot = {
        ref: convertRefToJoinRef(data.ref),
        id: data.snapshot.id,
        exists: data.snapshot.exists
      };
    }

    if (isDocumentReference(data)) {
      return convertRefToJoinRef(data);
    } else if (isJSDate(data)) {
      return convertJSDateToJoinDate(data);
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = preprocessObjectToStringify(data[key]);
      }
    }
  }

  return data;
}

function convertJoinRefToRef(JoinRef, firestore) {
  var isDoc = JoinRef.path.split('/').length % 2 === 0;

  if (isDoc) {
    return firestore.doc(JoinRef.path);
  }

  return firestore.collection(JoinRef.path);
}

function convertJoinDateToJSDate(joinDate) {
  return new Date(joinDate.value);
}

function toJSON(data) {
  var copy = _.cloneDeep(data);

  var toStringify = preprocessObjectToStringify(copy);
  return JSON.stringify(toStringify);
}

function isJoinRef(obj) {
  if (typeof obj !== 'object') return false;
  var keys = Object.keys(obj);

  if (keys.length === 2 && obj._type === 'DocumentReference') {
    return true;
  }

  return false;
}

function isJSDate(obj) {
  return obj instanceof Date;
}

function isJoinDate(obj) {
  if (typeof obj !== 'object') return false;
  var keys = Object.keys(obj);

  if (keys.length === 2 && obj._type === 'Date') {
    return true;
  }

  return false;
}

function processParsedJoinJSON(data, firestore) {
  if (data) {
    if (isJoinRef(data)) {
      return convertJoinRefToRef(data, firestore);
    } else if (isJoinDate(data)) {
      return convertJoinDateToJSDate(data);
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = processParsedJoinJSON(data[key], firestore);
      }
    }
  }

  return data;
}

function fromJSON(data, firestore) {
  var obj = JSON.parse(data);
  return processParsedJoinJSON(obj, firestore);
}

export { SerializedDocument, SerializedDocumentArray, SerializedDocumentArrayPromise, SerializedDocumentPromise, fromJSON, getCachedDocumentSnapshotPromise, setCacheTimeout, setSerializedDocumentTransformer, toJSON };
//# sourceMappingURL=firestore-join.esm.js.map
