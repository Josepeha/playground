import 'core-js/features/promise';
import firebase from 'firebase';
import DocumentReference = firebase.firestore.DocumentReference;
import DocumentSnapshot = firebase.firestore.DocumentSnapshot;
import QuerySnapshot = firebase.firestore.QuerySnapshot;
import Query = firebase.firestore.Query;
import CollectionReference = firebase.firestore.CollectionReference;
import Firestore = firebase.firestore.Firestore;
export interface CachedDocumentSnapshotPromise extends Promise<DocumentSnapshot> {
    time: number;
}
export interface IncludeConfig {
    [key: string]: Function | Object;
}
export interface JoinRef {
    _type: string;
    path: string;
}
export interface JoinDate {
    _type: string;
    value: string;
}
export interface SerializedDocumentNested {
    [key: string]: SerializedDocument;
}
export declare class SerializedDocumentPromise extends Promise<SerializedDocument> {
    ready: () => Promise<unknown>;
    constructor(fn: any);
}
export declare class SerializedDocumentArrayPromise extends Promise<SerializedDocumentArray> {
    ready: () => Promise<unknown>;
    constructor(fn: any);
}
export declare class SerializedDocumentArray extends Array<SerializedDocument> {
    constructor(querySnapshot: QuerySnapshot, includesConfig: IncludeConfig | 'ALL');
    static fromDocumentReferenceArray: (documentReferenceArray: [DocumentReference], includesConfig: IncludeConfig | 'ALL') => SerializedDocumentArrayPromise;
    static fromQuery: (collectionReferenceOrQuery: CollectionReference | Query, includesConfig: IncludeConfig | 'ALL') => SerializedDocumentArrayPromise;
    static fromJSON: (obj: string, firestore: Firestore) => SerializedDocumentArray;
    allPromises(): Promise<any[][]>;
    allPromisesRecursive(): Promise<unknown[]>;
    ready(): Promise<unknown>;
    JSONStringify(): string;
}
export declare class SerializedDocument {
    data: any;
    ref: firebase.firestore.DocumentReference;
    included: Object;
    promises: Object;
    _promisesArray: Promise<any>[];
    _includedArray: SerializedDocument[];
    snapshot: DocumentSnapshot;
    constructor(documentSnapshot: DocumentSnapshot, includeConfig?: IncludeConfig | 'ALL');
    static createLocal: (ref: DocumentReference, data?: any, includeConfig?: IncludeConfig | 'ALL') => SerializedDocument;
    static fromDocumentReference: (ref: DocumentReference, includeConfig: IncludeConfig | 'ALL') => SerializedDocumentPromise;
    static fromJSON: (obj: string, firestore: Firestore) => SerializedDocument;
    static toJSON: (obj: any) => string;
    processIncludes: (includeConfig: IncludeConfig | 'ALL') => void;
    includeReferenceArray: (path: string, documentReferenceArray: DocumentReference[], includeConfig?: {}) => void;
    includeDocumentReference: (path: string, documentReference: DocumentReference, includeConfig?: {}) => void;
    includeCollectionReferenceOrQuery: (path: string, collectionReferenceOrQuery: CollectionReference | Query, includeConfig?: {}) => void;
    findReferences: (data: {
        [key: string]: any;
    }, _pathSegments: Array<string>) => void;
    allPromisesRecursive: () => Promise<unknown>;
    ready: () => Promise<unknown>;
    JSONStringify: () => string;
}
export declare function setCacheTimeout(milliseconds: number): void;
export declare function setSerializedDocumentTransformer(transformerFunction: Function): void;
export declare function getCachedDocumentSnapshotPromise(documentReference: DocumentReference): CachedDocumentSnapshotPromise;
export declare function toJSON(data: {
    [key: string]: any;
}): string;
export declare function fromJSON(data: string, firestore: Firestore): any;
